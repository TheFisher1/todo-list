name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: cd ./frontend && npm i && npm run lint
      - run: cd ./user-service && npm i && npx eslint .
      - run: cd ./task-service && npm i && npx eslint .
      
  GitLeaks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: |
            detect --redact -v --exit-code=2 --report-format=sarif --report-path=results-${{ github.sha }}.sarif --log-level=debug --log-opts=-1

      - name: Upload SARIF report
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report-${{ github.sha }}
          path: results-${{ github.sha }}.sarif
  
  Snyk:
      runs-on: ubuntu-latest
      needs: GitLeaks
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Run Snyk
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Trivy:
    runs-on: ubuntu-latest
    needs: GitLeaks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Trivy Vulnerability Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          output: trivy-report.json
          format: json
          scan-ref: .
          exit-code: 0
  
      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

  Sonarcloud:
    name: SonarCloud Analysis
    needs: [Trivy, Snyk]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        ORG: ${{secrets.SONARQUBE_ORG}}
        PROJECT_KEY: ${{secrets.SONARQUBE_PROJECT_KEY}}

  Tests:
    runs-on: ubuntu-latest
    needs: Sonarcloud
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_todo_list
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd ./task-service && npm i
          cd ../user-service && npm i

      - name: Run migrations
        run: |
          cd ./task-service && npm run migrate:test
        env:
          TEST_DB_HOST: localhost
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          TEST_DB_NAME: test_todo_list

      - name: Run tests
        run: |
          cd ./task-service && npm run migrate:test
          cd ../user-service && npm run migrate:test
        env:
          TEST_DB_HOST: localhost
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_password
          TEST_DB_NAME: test_todo_list

  Docker-Image:
    name: Build Docker Image and push it to Docker Hub
    runs-on: ubuntu-latest
    needs: Tests
    strategy:
      matrix:
        service:
          - frontend
          - user-service
          - task-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/todo-list:${{ matrix.service }}-${{ github.sha }}

  Deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: Docker-Image
    steps:
      - name: Check out the repo 
        uses: actions/checkout@v3  
        
      - name: Install Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.1' 
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Update KubeConfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG_DATA" | base64 -d > $HOME/.kube/config
          aws eks update-kubeconfig --region eu-north-1 --name todoist

      - name: Deploy to EKS
        run: |
          kubectl patch deployment frontend --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value": ${{secrets.DOCKER_USERNAME}}/todo-list:frontend-${{ github.sha }}}]'

          kubectl patch deployment user-service --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value": ${{secrets.DOCKER_USERNAME}}/todo-list:user-service-${{ github.sha }}}]'
        
          kubectl patch deployment task-service --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value": ${{secrets.DOCKER_USERNAME}}/todo-list:task-service-${{ github.sha }}}]'

  # kubectl get deployment frontend -o yaml > frontend.yaml

    #      kubectl get deployment user-service -o yaml > user-service.yaml

   # kubectl get deployment task-service -o yaml > task-service.yaml