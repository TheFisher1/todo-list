name: CI

on:
  workflow_run:
    workflows: [Lint-Frontend, Lint-User, Lint-Task]
    types:
      - completed
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
    GitLeaks:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    Snyk:
      runs-on: ubuntu-latest
      needs: GitLeaks
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Run Snyk
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    Trivy:
      runs-on: ubuntu-latest
      needs: GitLeaks
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Generate Trivy Vulnerability Report
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: "fs"
            output: trivy-report.json
            format: json
            scan-ref: .
            exit-code: 0
  
        - name: Upload Vulnerability Scan Results
          uses: actions/upload-artifact@v4
          with:
            name: trivy-report
            path: trivy-report.json
            retention-days: 30

    Sonarcloud:
      name: SonarCloud Analysis
      needs: [Trivy, Snyk]
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          ORG: ${{secrets.SONARQUBE_ORG}}
          PROJECT_KEY: ${{secrets.SONARQUBE_PROJECT_KEY}}

    Tests:
      runs-on: ubuntu-latest
      needs: Sonarcloud
      services:
        postgres:
          image: postgres:16
          env:
            POSTGRES_USER: test_user
            POSTGRES_PASSWORD: test_password
            POSTGRES_DB: test_todo_list
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Install dependencies
          run: |
            cd ./task-service && npm i

        - name: Run migrations
          run: |
            cd ./task-service && npm run migrate:test
          env:
            TEST_DB_HOST: localhost
            TEST_DB_USER: test_user
            TEST_DB_PASSWORD: test_password
            TEST_DB_NAME: test_todo_list

        - name: Run tests
          run: |
            cd ./task-service && npm run migrate:test
          env:
            TEST_DB_HOST: localhost
            TEST_DB_USER: test_user
            TEST_DB_PASSWORD: test_password
            TEST_DB_NAME: test_todo_list

    Docker-Image:
      name: Build Docker Image and push it to Docker Hub
      runs-on: ubuntu-latest
      needs: Tests
      strategy:
        matrix:
          service:
            - frontend
            - user-service
            - task-service
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and push Docker image
          uses: docker/build-push-action@v6
          with:
            context: ./${{ matrix.service }}
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

    Deploy:
      name: Deploy to EKS
      runs-on: ubuntu-latest
      needs: Docker-Image
      steps:
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      
      - name: Install AWS
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY}}
          aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws configure set region ${{secrets.AWS_REGION}}

      # - name: Install Eksctl
      #   run: |
      #     curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
      #     sudo mv /tmp/eksctl /usr/local/bin
      
      - name: update kubeconfig and change context
        run: |
          aws eks update-kubeconfig --name ${{secrets.EKS_CLUSTER_NAME}} --region ${{secrets.AWS_REGION}}
          kubectl config use-context ${{secrets.EKS_CLUSTER_NAME}}

      - uses: actions/checkout@v4

      - name: update deployments
        run: |
          ./scripts/update-image.sh frontend
          ./scripts/update-image.sh user-service
          ./scripts/update-image.sh task-service
