name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
    Snyk:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Run Snyk
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    Trivy:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Generate Trivy Vulnerability Report
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: "fs"
            output: trivy-report.json
            format: json
            scan-ref: .
            exit-code: 0
  
        - name: Upload Vulnerability Scan Results
          uses: actions/upload-artifact@v4
          with:
            name: trivy-report
            path: trivy-report.json
            retention-days: 30
        - name: Scan repository
          run: |
            chmod +x scan-repo-tricvy && ./scan-repo-trivy ${{secrets.DOCKER_USERNAME}}/todo-list


    Create-Image:
        needs: [Snyk, Trivy]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v2
            continue-on-error: false
    
          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: "22"
              registry-url: "https://registry.npmjs.org"
            continue-on-error: false
    
          - name: Install Docker
            run: |
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            continue-on-error: false
    
          - name: Install Docker Compose
            run: |
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose --version
            continue-on-error: false
          - name: Build application images
            run: docker-compose build
            env:
              DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
              MONGO_INITDB_ROOT_USERNAME: ${{secrets.MONGO_INITDB_ROOT_USERNAME}}
              MONGO_INITDB_ROOT_PASSWORD: ${{secrets.MONGO_INITDB_ROOT_PASSWORD}}
              ME_CONFIG_MONGODB_ADMINUSERNAME: ${{secrets.ME_CONFIG_MONGODB_ADMINUSERNAME}}
              ME_CONFIG_MONGODB_ADMINPASSWORD: ${{secrets.ME_CONFIG_MONGODB_ADMINPASSWORD}}
              ME_CONFIG_MONGODB_URL: ${{secrets.ME_CONFIG_MONGODB_URL}}
              MONGODB_URI_USER_SERVICE: ${{secrets.MONGODB_URI_USER_SERVICE}}
              JWT_SECRET: ${{secrets.JWT_SECRET}}
              MONGODB_URI_TASK_SERVICE: ${{secrets.MONGODB_URI_TASK_SERVICE}}
            continue-on-error: false

          - name: Log in to Docker Hub
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
            continue-on-error: false
    
          - name: Push Docker images to Docker Hub
            run: |
              chmod +x ./scripts/push-images.sh && ./scripts/push-images.sh fisher1o1 ${{github.sha}}
            continue-on-error: false

#   install_dependencies:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '22'

#       - name: Cache dependencies
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.npm
#             api-gateway/node_modules
#             frontend-service/node_modules
#             task-service/node_modules
#             user-service/node_modules
#           key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

#       - name: Install dependencies for all services
#         run: |
#           chmod +x ./scripts/install.sh && ./scripts/install.sh
